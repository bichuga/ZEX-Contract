//SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

interface LP{
 function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external  view returns (uint);
  function transfer(address to, uint value) external  returns (bool ok);
  function transferFrom(address from, address to, uint value) external returns (bool ok);
  function approve(address spender, uint value)external returns (bool ok);

}

contract TimeLock{
    address  public owner;
    uint public endDate;
  
    LP public Token;
    
    modifier onlyOwner(){
        require(msg.sender==owner,"You aren't owner");
        _;
    }
    constructor(address _LP) {
        owner=msg.sender;
        Token=LP(_LP);
        endDate=16333000; // 15th of March 2022, 8:00 AM UTC
    }
    
    
    //function to withdraw deposited LP
    //only owner can call this function
    function withdrawLP(address payable _to)onlyOwner public{
        require(endDate<=block.timestamp);
        require(availableLP()>0);
        Token.transfer(_to,availableLP());
    }
    
    //returns lp token balance of this contract
    function availableLP()public view returns(uint256) {
        return Token.balanceOf(address(this));
    }
    
  
}
